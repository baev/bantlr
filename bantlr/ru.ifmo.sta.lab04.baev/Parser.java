package ru.ifmo.sta.lab04.baev;

import java.io.InputStream;
import java.util.Arrays;

/**
 * Generated by banler - Baev's ANother Tool for Language Recognition
 * <p/>
 * Saint Petersburg, 2013
 *
 * @author Dmitry Baev charlie@yandex-team.ru
 */
public class Parser {
    public static Node parse(InputStream is) throws ParseException {
        LexicalAnalyzer lexicalAnalyzer = new LexicalAnalyzer(is);

        lexicalAnalyzer.nextToken();
        return A(lexicalAnalyzer);
    }

    private static ARuleNode A(LexicalAnalyzer lexicalAnalyzer) throws ParseException {
        Token curToken = lexicalAnalyzer.getCurrentToken();

        switch (curToken) {

            case PLUS:
                Node PLUS0 = new Node(lexicalAnalyzer.getCurrentSubstring());
                lexicalAnalyzer.nextToken();
                ARuleNode A1 = A(lexicalAnalyzer);
                lexicalAnalyzer.nextToken();
                ARuleNode A2 = A(lexicalAnalyzer);
                return new ARuleNode("A", Arrays.asList(
                        PLUS0,
                        A1,
                        A2
                ));

            case OPERAND:
                Node OPERAND0 = new Node(lexicalAnalyzer.getCurrentSubstring());
                return new ARuleNode("A", Arrays.asList(
                        OPERAND0
                ));
            default:
                throw new ParseException("Expected [PLUS, OPERAND], but has "
                        + lexicalAnalyzer.getCurrentToken(), lexicalAnalyzer.getPosition());

        }
    }
}