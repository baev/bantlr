package ru.ifmo.sta.lab04.baev;

import java.io.InputStream;
import java.util.Arrays;

/**
* Generated by banler - Baev's ANother Tool for Language Recognition
*
* Saint Petersburg, 2013
* @author Dmitry Baev charlie@yandex-team.ru
*/
public class Parser {
    public static SRuleNode parse(InputStream is) throws ParseException {
        LexicalAnalyzer lexicalAnalyzer = new LexicalAnalyzer(is);

        lexicalAnalyzer.nextToken();
        return s(lexicalAnalyzer);
    }

    private static SRuleNode s(LexicalAnalyzer lexicalAnalyzer) throws ParseException {
    Token curToken = lexicalAnalyzer.getCurrentToken();

    switch (curToken) {

        case MULTIPLICATION: {
    ARuleNode a0 = a(lexicalAnalyzer);
    SRuleNode s = new SRuleNode("s", Arrays.<Node>asList(
        a0
    ));

    s.val = a0.val;

    return s;
}

        case PLUS: {
    ARuleNode a0 = a(lexicalAnalyzer);
    SRuleNode s = new SRuleNode("s", Arrays.<Node>asList(
        a0
    ));

    s.val = a0.val;

    return s;
}

        case EPS: {
    Node EPS0 = new Node(lexicalAnalyzer.getCurrentSubstring());
    SRuleNode s = new SRuleNode("s", Arrays.<Node>asList(
        EPS0
    ));

    ;

    return s;
}

        case MINUS: {
    ARuleNode a0 = a(lexicalAnalyzer);
    SRuleNode s = new SRuleNode("s", Arrays.<Node>asList(
        a0
    ));

    s.val = a0.val;

    return s;
}

        case NUMBER: {
    ARuleNode a0 = a(lexicalAnalyzer);
    SRuleNode s = new SRuleNode("s", Arrays.<Node>asList(
        a0
    ));

    s.val = a0.val;

    return s;
}
        default:
        throw new ParseException("Expected [MULTIPLICATION, PLUS, EPS, MINUS, NUMBER], but has "
        + lexicalAnalyzer.getCurrentToken(), lexicalAnalyzer.getPosition());

    }
}

    private static ARuleNode a(LexicalAnalyzer lexicalAnalyzer) throws ParseException {
    Token curToken = lexicalAnalyzer.getCurrentToken();

    switch (curToken) {

        case MULTIPLICATION: {
    Node MULTIPLICATION0 = new Node(lexicalAnalyzer.getCurrentSubstring());
    lexicalAnalyzer.nextToken();
    ARuleNode a1 = a(lexicalAnalyzer);
    lexicalAnalyzer.nextToken();
    ARuleNode a2 = a(lexicalAnalyzer);
    ARuleNode a = new ARuleNode("a", Arrays.<Node>asList(
        MULTIPLICATION0,
        a1,
        a2
    ));

    a.val = a1.val * a2.val;

    return a;
}

        case PLUS: {
    Node PLUS0 = new Node(lexicalAnalyzer.getCurrentSubstring());
    lexicalAnalyzer.nextToken();
    ARuleNode a1 = a(lexicalAnalyzer);
    lexicalAnalyzer.nextToken();
    ARuleNode a2 = a(lexicalAnalyzer);
    ARuleNode a = new ARuleNode("a", Arrays.<Node>asList(
        PLUS0,
        a1,
        a2
    ));

    a.val = a1.val + a2.val;

    return a;
}

        case MINUS: {
    Node MINUS0 = new Node(lexicalAnalyzer.getCurrentSubstring());
    lexicalAnalyzer.nextToken();
    ARuleNode a1 = a(lexicalAnalyzer);
    lexicalAnalyzer.nextToken();
    ARuleNode a2 = a(lexicalAnalyzer);
    ARuleNode a = new ARuleNode("a", Arrays.<Node>asList(
        MINUS0,
        a1,
        a2
    ));

    a.val = a1.val - a2.val;

    return a;
}

        case NUMBER: {
    Node NUMBER0 = new Node(lexicalAnalyzer.getCurrentSubstring());
    ARuleNode a = new ARuleNode("a", Arrays.<Node>asList(
        NUMBER0
    ));

    a.val = toInteger(NUMBER0.getName());

    return a;
}
        default:
        throw new ParseException("Expected [MULTIPLICATION, PLUS, MINUS, NUMBER], but has "
        + lexicalAnalyzer.getCurrentToken(), lexicalAnalyzer.getPosition());

    }
}

    public static int toInteger(String s) {
        return Integer.parseInt(s);
    }
}